version: 2.1

orbs:
  node: circleci/node@5.0.2

executors:
  linux: &linux-executor
    machine:
      image: ubuntu-2004:2023.04.2
  win: &win-executor
    machine:
      image: windows-server-2022-gui:current
      resource_class: windows.medium
      shell: powershell.exe -ExecutionPolicy Bypass

jobs:
  desktop-builder:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - checkout

      # Initiate node js on linux
      - when:
          condition:
            equal: [*linux-executor, << parameters.os >>]
          steps:
            - node/install:
                node-version: "18.15.0"

      # Initiate node js on windows
      - when:
          condition:
            equal: [*win-executor, << parameters.os >>]
          steps:
            - run: choco install wget -y
            - run:
                command: wget https://nodejs.org/dist/v18.15.0/node-v18.15.0-x86.msi -P C:\Users\circleci\Downloads\
                shell: cmd.exe
            - run: MsiExec.exe /i C:\Users\circleci\Downloads\node-v18.15.0-x86.msi /qn
            - run:
                command: |
                  Start-Process powershell -verb runAs -Args "-start GeneralProfile"
                  nvm install 18.15.0
                  nvm use 18.15.0

      - run: node --version
      - run:
          name: Using latest yarn
          command: |
            corepack enable
            corepack prepare yarn@stable --activate
      - run: yarn -v
      - run:
          name: Install all dependencies
          command: |
            yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
            - .yarn/releases
            - .yarn/install-state.gz

      - run:
          name: Test Code Linting
          command: |
            yarn lint
      - run:
          name: Prisma generate
          command: |
            yarn generate

      - when:
          condition:
            equal: [*linux-executor, << parameters.os >>]
          steps:
            - run:
                name: Build linux based desktop app
                command: |
                  yarn build-desktop:linux
                  tar -czvf ./apps/sora-desktop/dist/linux-unpacked.tar.gz ./apps/sora-desktop/dist/linux-unpacked
                  tar -czvf ./apps/absensi-desktop/dist/linux-unpacked.tar.gz ./apps/absensi-desktop/dist/linux-unpacked

      - when:
          condition:
            equal: [*win-executor, << parameters.os >>]
          steps:
            - run:
                name: Build windows desktop app
                command: |
                  yarn build-desktop:win
                  Compress-Archive -Path .\apps\sora-desktop\dist\win-unpacked -Destination .\apps\sora-desktop\dist\win-unpacked.zip
                  Compress-Archive -Path .\apps\absensi-desktop\dist\win-unpacked -Destination .\apps\absensi-desktop\dist\win-unpacked.zip

      - store_artifacts:
          path: apps/*-desktop/dist/*.tar.gz
      - store_artifacts:
          path: apps/*-desktop/dist/*.zip
      - store_artifacts:
          path: apps/*-desktop/dist/*.deb
      - store_artifacts:
          path: apps/*-desktop/dist/*.AppImage
      - store_artifacts:
          path: apps/*-desktop/dist/*.exe

workflows:
  all-builds:
    jobs:
      - desktop-builder:
          matrix:
            parameters:
              os: [linux, win]
