import useSWR from "swr";
import Head from "next/head";
import Router from "next/router";
import { Types } from "mongoose";
import type { NextPage } from "next";
import { GetServerSideProps } from "next";
import { useState, useEffect, useRef } from "react";
import {
  useToast,
  useDisclosure,
  Container,
  Box,
  Text,
  Divider,
  VStack,
  HStack,
  Image,
  Center,
  Heading,
  Button,

  // Alert dialog
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
} from "@chakra-ui/react";
import type { SafePaslonTransformatorInterface } from "@/lib/valueTransformator";

import { useUser } from "@/lib/hooks";
import { getBaseUrl } from "@/lib/utils";
import { ssrCallback } from "@/lib/csrf";

type HomeType = {
  paslon: SafePaslonTransformatorInterface[];
  csrfToken: string;
};

const Home: NextPage<HomeType> = ({ paslon, csrfToken }) => {
  const { data } = useSWR<{ paslon: SafePaslonTransformatorInterface[] }>(
    "/api/vote",
    {
      fallbackData: {
        paslon,
      },
    }
  );
  const [user] = useUser();

  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const cancelRef = useRef<HTMLButtonElement>(null!);
  const sendRef = useRef<HTMLButtonElement>(null!);

  // Untuk keperluan pemilihan
  const [currentID, setID] = useState<Types.ObjectId | null>(null);
  const [isSubmitting, setSubmit] = useState<boolean>(false);

  const getNama = () => {
    const currentPaslon =
      data?.paslon && data?.paslon!.find((p) => p._id === currentID);

    return `${currentPaslon?.ketua} dan ${currentPaslon?.wakil}`;
  };

  useEffect(() => {
    // ADMIN TIDAK BOLEH IKUT MEMILIH!
    if (user) Router.push("/admin");
  }, [user]);

  return (
    <>
      <Head>
        <title>Pilih Paslon Mu | NVA13</title>

        <meta name="description" content="Generated by create next app" />
      </Head>

      {data !== null && data?.paslon ? (
        <VStack align="stretch" mt={3}>
          <HStack style={{ justifyContent: "center" }}>
            <Text fontWeight="500" fontSize="4xl">
              Pilih Ketua Barumu!
            </Text>
          </HStack>
          <HStack
            spacing={4}
            style={{
              paddingLeft: "9px",
              paddingRight: "9px",
              paddingTop: "15px",
              margin: "0 auto",
              justifyContent: "center",
              flexWrap: "wrap",
            }}
          >
            {data.paslon?.map((paslon) => (
              <Center key={paslon.imgName} py={6}>
                <Box
                  maxW={"320px"}
                  w={"full"}
                  borderWidth="1px"
                  borderRadius="lg"
                  bg="white"
                  textAlign={"center"}
                >
                  <Image
                    src={`/api/uploads/${paslon.imgName}`}
                    alt={`Gambar dari pasangan calon ${paslon.ketua} dan ${paslon.wakil}.`}
                  />
                  <Heading mt={2} fontSize={"3xl"} fontFamily={"body"}>
                    Pasangan Calon
                  </Heading>
                  <Text fontSize={"1.4rem"} mt={2}>
                    {paslon.ketua}
                  </Text>
                  <Text fontSize={"1.4rem"} mb={4}>
                    {paslon.wakil}
                  </Text>

                  <Button
                    onClick={(e) => {
                      (e.target as HTMLInputElement).blur();
                      setID(paslon._id);
                      onOpen();
                    }}
                    colorScheme="green"
                    variant="solid"
                    mb={4}
                  >
                    Pilih
                  </Button>
                </Box>
              </Center>
            ))}
          </HStack>

          <AlertDialog
            isCentered
            isOpen={isOpen}
            leastDestructiveRef={cancelRef}
            onClose={() => {
              if (!isSubmitting) {
                setID(null);
                onClose();
              }
            }}
          >
            <AlertDialogOverlay>
              <AlertDialogContent>
                <AlertDialogHeader fontSize="lg" fontWeight="bold">
                  Pilih Paslon
                </AlertDialogHeader>

                <AlertDialogBody>
                  Apakah anda yakin untuk memilih paslon atas nama {getNama()}?
                </AlertDialogBody>

                <AlertDialogFooter>
                  <Button
                    ref={cancelRef}
                    onClick={onClose}
                    disabled={isSubmitting}
                  >
                    Batal
                  </Button>
                  <Button
                    colorScheme="green"
                    ref={sendRef}
                    onClick={async () => {
                      sendRef.current.setAttribute("disabled", "disabled");
                      setSubmit(true);

                      const response = await fetch("/api/vote", {
                        method: "POST",
                        body: JSON.stringify({
                          id: currentID,
                        }),
                        headers: {
                          "Content-Type": "application/json",
                          "CSRF-Token": csrfToken,
                        },
                      });

                      const result = await response.json();

                      setSubmit(false);
                      onClose();

                      toast({
                        description: result.message,
                        status: result.error ? "error" : "success",
                        duration: 3000,
                        position: "top-right",
                        isClosable: true,
                      });

                      sendRef.current.setAttribute("disabled", "");
                    }}
                    ml={3}
                  >
                    Pilih
                  </Button>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialogOverlay>
          </AlertDialog>
        </VStack>
      ) : (
        <MasihKosong />
      )}
    </>
  );
};

const MasihKosong = () => (
  <Container>
    <Box p={4} borderWidth="1px" mt="6" borderRadius="lg">
      <Text fontSize="2xl" fontWeight="semibold" color="gray.900">
        Tidak Ada Data PASLON
      </Text>
      <Divider orientation="horizontal" mt="1" mb="1" />
      <Text>
        Tidak ada data paslon yang ada, mohon hubungi admin untuk menambahkan
        data paslon.
      </Text>
    </Box>
  </Container>
);

export const getServerSideProps: GetServerSideProps<HomeType> = async ({
  req,
  res,
}) => {
  const baseUrl = getBaseUrl(req);
  await ssrCallback({ req, res });

  const response = await fetch(`${baseUrl}/api/vote`);
  const { paslon } = await response.json();

  return {
    props: {
      paslon,
      csrfToken: (req as unknown as { csrfToken(): string }).csrfToken(),
    },
  };
};

export default Home;
