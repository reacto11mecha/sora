import useSWR from "swr";
import Head from "next/head";
import Router from "next/router";
import { Types } from "mongoose";
import type { NextPage } from "next";
import { GetServerSideProps } from "next";
import { useState, useEffect, useRef, useMemo } from "react";
import {
  useToast,
  useDisclosure,
  Container,
  Box,
  Text,
  Divider,
  VStack,
  HStack,
  Image,
  Center,
  Heading,
  Button,

  // Alert dialog
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
} from "@chakra-ui/react";
import { DateTime } from "luxon";

import { useUser, useSettings } from "@/lib/hooks";
import { getBaseUrl } from "@/lib/utils";
import { ssrCallback } from "@/lib/csrf";

import type { SafePaslonTransformatorInterface } from "@/lib/valueTransformator";
import type { TModelApiResponse } from "@/lib/settings";
import type { UserType } from "@/lib/hooks";

type HomeType = {
  paslon: SafePaslonTransformatorInterface[];
  settingsFallback: TModelApiResponse | null;
  userFallback: UserType | null;
};

let rafID: number;

const Home: NextPage<HomeType & commonComponentInterface> = ({
  paslon,
  csrfToken,
  userFallback,
  settingsFallback,
}) => {
  const { data } = useSWR<{ paslon: SafePaslonTransformatorInterface[] }>(
    "/api/vote",
    {
      fallbackData: {
        paslon,
      },
    }
  );
  const [user] = useUser({
    fallbackData: userFallback,
  });
  const [settings] = useSettings({
    fallbackData: settingsFallback,
  });

  const [currentTime, setCurrentTime] = useState<number>(new Date().getTime());
  const timeSetting = useMemo(
    () => ({
      mulai: settings?.startTime
        ? DateTime.fromISO(settings?.startTime as unknown as string)
            .toLocal()
            .toJSDate()
            .getTime()
        : false,
      selesai: settings?.endTime
        ? DateTime.fromISO(settings?.endTime as unknown as string)
            .toLocal()
            .toJSDate()
            .getTime()
        : false,
    }),
    [settings]
  );
  const canVoteNow = useMemo(
    () =>
      timeSetting?.mulai <= currentTime &&
      timeSetting?.selesai >= currentTime &&
      settings.canVote,
    [timeSetting, settings, currentTime]
  );

  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const cancelRef = useRef<HTMLButtonElement>(null!);
  const sendRef = useRef<HTMLButtonElement>(null!);

  // Untuk keperluan pemilihan
  const [currentID, setID] = useState<Types.ObjectId | null>(null);
  const [isSubmitting, setSubmit] = useState<boolean>(false);

  const getNama = () => {
    const currentPaslon =
      data?.paslon && data?.paslon!.find((p) => p._id === currentID);

    return `${currentPaslon?.ketua} dan ${currentPaslon?.wakil}`;
  };

  useEffect(() => {
    function updateTime() {
      setCurrentTime(new Date().getTime());
      rafID = window.requestAnimationFrame(updateTime);
    }
    updateTime();

    return () => {
      window.cancelAnimationFrame(rafID);
    };
  }, []);

  useEffect(() => {
    // ADMIN TIDAK BOLEH IKUT MEMILIH!
    if (user) Router.push("/admin");
  }, [user]);

  return (
    <>
      <Head>
        <title>Pilih Paslon Mu | ᮞᮧᮛ</title>

        <meta name="description" content="Generated by create next app" />
      </Head>

      {data !== null && data?.paslon && !user && canVoteNow ? (
        <VStack align="stretch" mt={3}>
          <HStack style={{ justifyContent: "center" }}>
            <Text fontWeight="500" fontSize="4xl">
              Pilih Ketua Barumu!
            </Text>
          </HStack>
          <HStack
            spacing={4}
            style={{
              paddingLeft: "9px",
              paddingRight: "9px",
              paddingTop: "15px",
              margin: "0 auto",
              justifyContent: "center",
              flexWrap: "wrap",
            }}
          >
            {data.paslon?.map((paslon) => (
              <Center key={paslon.imgName} py={6}>
                <Box
                  maxW={"320px"}
                  w={"full"}
                  borderWidth="1px"
                  borderRadius="lg"
                  bg="white"
                  textAlign={"center"}
                >
                  <Image
                    src={`/api/uploads/${paslon.imgName}`}
                    alt={`Gambar dari pasangan calon ${paslon.ketua} dan ${paslon.wakil}.`}
                  />
                  <Heading mt={2} fontSize={"3xl"} fontFamily={"body"}>
                    Pasangan Calon
                  </Heading>
                  <Text fontSize={"1.4rem"} mt={2}>
                    {paslon.ketua}
                  </Text>
                  <Text fontSize={"1.4rem"} mb={4}>
                    {paslon.wakil}
                  </Text>

                  <Button
                    onClick={(e) => {
                      (e.target as HTMLInputElement).blur();
                      setID(paslon._id);
                      onOpen();
                    }}
                    colorScheme="green"
                    variant="solid"
                    mb={4}
                  >
                    Pilih
                  </Button>
                </Box>
              </Center>
            ))}
          </HStack>

          <AlertDialog
            isCentered
            isOpen={isOpen}
            leastDestructiveRef={cancelRef}
            onClose={() => {
              if (!isSubmitting) {
                setID(null);
                onClose();
              }
            }}
          >
            <AlertDialogOverlay>
              <AlertDialogContent>
                <AlertDialogHeader fontSize="lg" fontWeight="bold">
                  Pilih Paslon
                </AlertDialogHeader>

                <AlertDialogBody>
                  Apakah anda yakin untuk memilih paslon atas nama {getNama()}?
                </AlertDialogBody>

                <AlertDialogFooter>
                  <Button
                    ref={cancelRef}
                    onClick={onClose}
                    disabled={isSubmitting}
                  >
                    Batal
                  </Button>
                  <Button
                    colorScheme="green"
                    ref={sendRef}
                    onClick={async () => {
                      sendRef.current.setAttribute("disabled", "disabled");
                      setSubmit(true);

                      const response = await fetch("/api/vote", {
                        method: "POST",
                        body: JSON.stringify({
                          id: currentID,
                          timeZone: DateTime.local().zoneName,
                        }),
                        headers: {
                          "Content-Type": "application/json",
                          "CSRF-Token": csrfToken,
                        },
                      });

                      const result = await response.json();

                      setSubmit(false);
                      onClose();

                      toast({
                        description: result.message,
                        status: result.error ? "error" : "success",
                        duration: 3000,
                        position: "top-right",
                        isClosable: true,
                      });

                      sendRef.current.setAttribute("disabled", "");

                      if (!result.error && settings?.reloadAfterVote)
                        setTimeout(() => Router.reload(), 500);
                    }}
                    ml={3}
                  >
                    Pilih
                  </Button>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialogOverlay>
          </AlertDialog>
        </VStack>
      ) : canVoteNow && !user ? (
        <MasihKosong />
      ) : (
        <TidakDiizinkanMemilih />
      )}
    </>
  );
};

const MasihKosong = () => (
  <Container>
    <Box p={4} borderWidth="1px" mt="6" borderRadius="lg">
      <Text fontSize="2xl" fontWeight="semibold" color="gray.900">
        Tidak Ada Data PASLON
      </Text>
      <Divider orientation="horizontal" mt="1" mb="1" />
      <Text>
        Tidak ada data paslon yang ada, mohon hubungi admin untuk menambahkan
        data paslon.
      </Text>
    </Box>
  </Container>
);

const TidakDiizinkanMemilih = () => (
  <HStack h={"100vh"} justifyContent="center">
    <Box
      borderWidth="2px"
      borderRadius="lg"
      w="85%"
      h="90%"
      style={{
        display: "flex",
        boxShadow: "rgba(99, 99, 99, 0.2) 0px 2px 8px 0px",
      }}
      alignItems="center"
      justifyContent="center"
    >
      <Heading size="lg" fontSize="50px" fontWeight="semibold" color="gray.900">
        Tidak <Text color="red">Di izinkan</Text>
        Untuk memilih!
      </Heading>
    </Box>
  </HStack>
);

export const getServerSideProps: GetServerSideProps<
  HomeType & commonComponentInterface
> = async ({ req, res }) => {
  const baseUrl = getBaseUrl(req);
  await ssrCallback({ req, res });

  const [{ paslon }, pengaturan, { user }] = await Promise.all([
    fetch(`${baseUrl}/api/vote`).then((res) => res.json()),
    fetch(`${baseUrl}/api/settings`).then((res) => res.json()),
    fetch(`${baseUrl}/api/user`, {
      credentials: "include",
      headers: {
        Cookie: req.headers.cookie ? req.headers.cookie : "",
      },
    }).then((res) => res.json()),
  ]);

  return {
    props: {
      userFallback: user,
      settingsFallback: pengaturan ? pengaturan : null,
      paslon,
      csrfToken: (req as unknown as { csrfToken(): string }).csrfToken(),
    },
  };
};

export default Home;
